@page "/fetchdata"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject ITmdbService TmdbService

<h3>Get movie recommendations</h3>
<div style="display: flex; flex-direction: column; align-items: center;">
    <input class="form-control" style="width: 60%;" type="text" @bind="@movieTitle" placeholder="Enter a movie title" />
    <button class="btn btn-dark" style="margin-top: 15px; margin-bottom: 15px;" type="button" @onclick="OnButtonClick" @onclick:preventDefault>Fetch Recommendations</button>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <p><em>@errorMessage</em></p>
}
else if (recommendedMovies != null && recommendedMovies.Any())
{
    <div style="display: flex; flex-direction: column;">
        @foreach (var movie in recommendedMovies)
        {
            <div style="flex: 1;">
                <p><strong>@movie.Title</strong></p>
                @if (!string.IsNullOrEmpty(movie.ImageUrl))
                {
                    <img src="@movie.ImageUrl" alt="@movie.Title" width="150" />
                }
                else
                {
                    <p>No Image Available</p>
                }
            </div>
        }
    </div>
}
else
{
    <p>No recommendations found.</p>
}

@code {
    private bool isLoading = false;
    private List<MovieRecommendation> recommendedMovies = new List<MovieRecommendation>();
    private string errorMessage;
    private string movieTitle = "";

    private async Task OnButtonClick()
    {
        await FetchRecommendations();
    }

    private async Task FetchRecommendations()
    {
        if (string.IsNullOrWhiteSpace(movieTitle))
        {
            errorMessage = "Please enter a movie title.";
            return;
        }

        errorMessage = null;
        recommendedMovies.Clear();

        isLoading = true;
        StateHasChanged();

        try
        {
            var apiUrl = $"http://localhost:8080/api/recommend/{movieTitle}";
            var response = await Http.GetFromJsonAsync<ApiResponse>(apiUrl);

            if (response?.RecommendedMovies != null && response.RecommendedMovies.Any())
            {
                var moviesWithImages = new List<MovieRecommendation>();
                foreach (var title in response.RecommendedMovies)
                {
                    string imageUrl = await TmdbService.GetMovieImageAsync(title);
                    moviesWithImages.Add(new MovieRecommendation { Title = title, ImageUrl = imageUrl });
                }

                recommendedMovies = moviesWithImages;
            }
            else
            {
                errorMessage = "No recommendations found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class ApiResponse
    {
        [JsonPropertyName("recommended_movies")]
        public List<string> RecommendedMovies { get; set; } = new();
    }

    private class MovieRecommendation
    {
        public string Title { get; set; }
        public string ImageUrl { get; set; }
    }
}